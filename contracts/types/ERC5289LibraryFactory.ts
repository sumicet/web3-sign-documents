/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ERC5289LibraryFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "createLibrary" | "getLibraries" | "getLibrary"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LibraryCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createLibrary",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLibraries",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLibrary",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLibraries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLibrary", data: BytesLike): Result;
}

export namespace LibraryCreatedEvent {
  export type InputTuple = [wallet: AddressLike, libraryAddress: AddressLike];
  export type OutputTuple = [wallet: string, libraryAddress: string];
  export interface OutputObject {
    wallet: string;
    libraryAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC5289LibraryFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ERC5289LibraryFactory;
  waitForDeployment(): Promise<this>;

  interface: ERC5289LibraryFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createLibrary: TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;

  getLibraries: TypedContractMethod<[wallet: AddressLike], [string[]], "view">;

  getLibrary: TypedContractMethod<
    [wallet: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createLibrary"
  ): TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLibraries"
  ): TypedContractMethod<[wallet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getLibrary"
  ): TypedContractMethod<
    [wallet: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "LibraryCreated"
  ): TypedContractEvent<
    LibraryCreatedEvent.InputTuple,
    LibraryCreatedEvent.OutputTuple,
    LibraryCreatedEvent.OutputObject
  >;

  filters: {
    "LibraryCreated(address,address)": TypedContractEvent<
      LibraryCreatedEvent.InputTuple,
      LibraryCreatedEvent.OutputTuple,
      LibraryCreatedEvent.OutputObject
    >;
    LibraryCreated: TypedContractEvent<
      LibraryCreatedEvent.InputTuple,
      LibraryCreatedEvent.OutputTuple,
      LibraryCreatedEvent.OutputObject
    >;
  };
}
