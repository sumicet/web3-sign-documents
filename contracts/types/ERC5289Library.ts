/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ERC5289LibraryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLegalDocument"
      | "documentSigned"
      | "documentSignedAt"
      | "getMetadata"
      | "legalDocument"
      | "signDocument"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DocumentSigned"): EventFragment;

  encodeFunctionData(
    functionFragment: "addLegalDocument",
    values: [BigNumberish, string, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "documentSigned",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "documentSignedAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "legalDocument",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signDocument",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLegalDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "documentSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "documentSignedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legalDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signDocument",
    data: BytesLike
  ): Result;
}

export namespace DocumentSignedEvent {
  export type InputTuple = [signer: AddressLike, documentId: BigNumberish];
  export type OutputTuple = [signer: string, documentId: bigint];
  export interface OutputObject {
    signer: string;
    documentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC5289Library extends BaseContract {
  connect(runner?: ContractRunner | null): ERC5289Library;
  waitForDeployment(): Promise<this>;

  interface: ERC5289LibraryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLegalDocument: TypedContractMethod<
    [documentId: BigNumberish, document: string, signers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  documentSigned: TypedContractMethod<
    [signer: AddressLike, documentId: BigNumberish],
    [boolean],
    "view"
  >;

  documentSignedAt: TypedContractMethod<
    [signer: AddressLike, documentId: BigNumberish],
    [bigint],
    "view"
  >;

  getMetadata: TypedContractMethod<
    [],
    [[string, string] & { title: string; description: string }],
    "view"
  >;

  legalDocument: TypedContractMethod<
    [documentId: BigNumberish],
    [string],
    "view"
  >;

  signDocument: TypedContractMethod<
    [signer: AddressLike, documentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLegalDocument"
  ): TypedContractMethod<
    [documentId: BigNumberish, document: string, signers: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "documentSigned"
  ): TypedContractMethod<
    [signer: AddressLike, documentId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "documentSignedAt"
  ): TypedContractMethod<
    [signer: AddressLike, documentId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMetadata"
  ): TypedContractMethod<
    [],
    [[string, string] & { title: string; description: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "legalDocument"
  ): TypedContractMethod<[documentId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "signDocument"
  ): TypedContractMethod<
    [signer: AddressLike, documentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DocumentSigned"
  ): TypedContractEvent<
    DocumentSignedEvent.InputTuple,
    DocumentSignedEvent.OutputTuple,
    DocumentSignedEvent.OutputObject
  >;

  filters: {
    "DocumentSigned(address,uint16)": TypedContractEvent<
      DocumentSignedEvent.InputTuple,
      DocumentSignedEvent.OutputTuple,
      DocumentSignedEvent.OutputObject
    >;
    DocumentSigned: TypedContractEvent<
      DocumentSignedEvent.InputTuple,
      DocumentSignedEvent.OutputTuple,
      DocumentSignedEvent.OutputObject
    >;
  };
}
